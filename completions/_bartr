#compdef _bartr bartr

function _bartr(){
  local line state

  _arguments \
    '--help[Display help and usage]' \
    '--version[Display version info]' \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    cmds)
      _values \
        "commands" \
        "app[App commands]" \
        "ls[List the apps]" \
        "new[Create a new app]"
    ;;

    args)
      case $line[1] in
        app)
          _app
        ;;
        new)
          _new
        ;;
        ls)
          _arguments \
            '--type+[Type of objects to list]:type:(all pods secrets services)' \
            '--help[Display help and usage]'
          return 0
        ;;
      esac
    ;;
  esac
}

function _app(){
  local line state

  _arguments \
    '--help[Display help and usage]' \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    cmds)
      _values \
        'application commands' \
        'create[Create a new app]' \
        'info[Get application info]' \
        'set[Set application values]'
    ;;

    args)
    case $line[1] in
      create)
        _arguments \
        '--help[Display help and usage]' \
        '--app-name+[Application name]:App name:' \
        '--namespace+[Kubernetes namespace]:Namespace:' \
        '--image+[Image name]:Image and tag:' \
        '--cpu-limit+[CPU Limit]:CPU Limit:(250m 500m 1000m 2000m)' \
        '--memory-limit+[Memory Limit]:Memory Limit:(256Mi 512Mi 1024Mi 2048Mi)' \
        '--cpu-request+[CPU Request]:CPU Request:(250m 500m 1000m 2000m)' \
        '--memory-request+[Memory Request]:Memory Request:(256Mi 512Mi 1024Mi 2048Mi)' \
        '--readiness-probe+[Readiness Probe path]:Readiness Probe:(/readyz)' \
        '--liveness-probe+[Liveness Probe path]:Liveness Probe:(/healthz)' \
        '--port+[Port app exposes]:Port:(8080)' \
        '--node-port+[NodePort for app]:Node Port:(30080)' \
        '--force[Force overwriting config]'
      ;;

      set)
        _values \
          'key to set' \
          'AppName[Application name]' \
          'Namespace[Kubernetes namespace]' \
          'Args[Application arguments]' \
          'Image[Docker image:tag]' \
          'Port[Service Port]' \
          'NodePort[Node Port]' \
          'CpuLimit[CPU Limit]' \
          'CpuRequest[Requested CPU]' \
          'MemoryLimit[Memory Limit]' \
          'MemoryRequest[Requested Memor]' \
          'LivenessProbe[Liveness probe (default /healthz)]' \
          'ReadinessProbe[Readiness probe (default /readyz)]'
      ;;

      info)
        _arguments \
          '--help[Display help and usage]'
      ;;
    esac
    ;;
  esac
}

function _new(){
  local line state

  _arguments \
    '--help[Display help and usage]' \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    cmds)
      _values \
        'select framework' \
        'dotnet[New dotnet app]' \
        'spring[New SpringBoot app]' \
        'ts[New TypeScript app]' \
    ;;

    args)
      case $line[2] in
        daemon|webapi)
          _arguments \
            '--help[Display help and usage]'
          return 0
        ;;

        *)
          case $line[1] in
            dotnet|spring|ts)
            _values \
              'select app type' \
              'webapi[New WebAPI app]' \
              'daemon[New daemon app]'
          ;;
          esac
        ;;
      esac
    ;;
  esac
}
